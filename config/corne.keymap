/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE     &kp Q            &kp W                &kp E              &kp R            &kp T                              &kp Y    &HMR RIGHT_GUI U  &HMR RIGHT_SHIFT I  &HMR RIGHT_CONTROL O  &HMR RIGHT_ALT P  &kp MINUS
&kp BACKSPACE  &HML LEFT_ALT A  &HML LEFT_CONTROL S  &HML LEFT_SHIFT D  &HML LEFT_GUI F  &kp G                              &kp H    &kp J             &kp K               &kp L                 &kp SEMI          &kp SQT
&kp TAB        &kp Z            &kp X                &kp C              &kp V            &kp B                              &kp N    &kp M             &kp COMMA           &kp DOT               &kp FSLH          &kp ESC
                                                     &sl 3              &mo 1            &HML LS(LA(LC(LEFT_GUI))) SPACE    &kp RET  &mo 2             &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LEFT_SHIFT  &kp DELETE            &mt AMPERSAND N7          &mt ASTERISK N8             &mt LEFT_PARENTHESIS N9  &kp EQUAL    &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp BACKSPACE   &kp SLASH             &mt DOLLAR NUMBER_4       &mt PERCENT N5              &mt CARET NUMBER_6       &kp RET      &kp LEFT         &kp DOWN         &kp UP                &kp RIGHT              &kp NON_US_HASH   &kp PERCENT
&kp TAB         &kp NON_US_BACKSLASH  &mt EXCLAMATION NUMBER_1  &mt DOUBLE_QUOTES NUMBER_2  &mt HASH NUMBER_3        &kp N0       &kp COMMA        &kp PERIOD       &kp MINUS             &kp ASTRK              &kp DOLLAR        &kp RIGHT_CONTROL
                                                                &kp LGUI                    &trans                   &kp SPACE    &kp RIGHT_SHIFT  &trans           &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4        &kp F5          &kp F5    &kp F6        &kp F7         &kp F8           &kp F9           &kp F10       &kp F11
&trans  &trans  &trans  &kp C_NEXT    &kp C_PREVIOUS  &trans    &kp PAGE_UP   &kp PAGE_DOWN  &kp C_VOLUME_UP  &kp C_VOLUME_UP  &kp K_MUTE    &trans
&trans  &trans  &trans  &kp C_BRI_UP  &kp C_BRI_DEC   &trans    &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
                        &sl 0         &trans          &trans    &trans        &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
